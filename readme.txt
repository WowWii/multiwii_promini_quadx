Introduction and overview
=========================

This folder contains the firmware used to fly the 3 bladed vehicle. 
It consists mainly of the plain multiwii code, where I've deleted A LOT 
of the original code. The goal was to end up with something minimal, where I 
could easily understand what was happening where. The purge was not systematic,
there is porbably still lots of code that is irrelevant for the 3spinner.

The main magic happens in 'MultiWii.cpp'. This is where the controller runs, 
and also where the state estimation is done (specifically, in the function 
'loop'.

The vehicle's automatic control is model based. There is an estimator which 
estimates the vehicle's tilt angle (something like the Euler roll & pitch 
angles). Then there a controller, that tries to drive the vehicle's tilt 
to a desired tilt -- the controller outputs force differentials, which are 
then mixed to the individual motor thrusts.

The main ideas for the control are described in the paper 'Stability and 
control of a quadrocopter despite the complete loss of one, two, or three 
propellers',  which may be found here: http://www.mwm.im/ResearchFiles/Papers/StabilityAndControlOfAQuadrocopterDespiteTheCompleteLossOfOneTwoOrThreePropellers.pdf

The estimator works as follows. Referring to the above paper, we try to 
estimate the unit vector `n`, which satisfies the differential equation 
(15). This differential equation is implemented in the code, where the 
rate gyro data are used for omega_B. Note that we also inlcude some 
stabilisation terms, which force the vector to slowly converge back to (0,0,1). 
This stabilising term is implemented as a simple proportional gain, with a 
small time constant (`NORMAL_LEAKING_CONST` in the code). This allows the 
estimator to 'forget' errors in the past.

The second step consists of a linear time invariant controller, that outputs 
force differentials as a function of state errors. There are two force 
differentials, one each about the vehicle's x and y axes. The controller gains
are generated by a python script. The controller is broadly comparable to a PID
controller, except that these rotating vehicles do not decompose as easily. 
The controller gains are harder to tune than typical PID gains, but allow to 
design controllers for more complicated systems. 

The output of the controller is mixed with a desired total thrust, to produce 
the individual motor forces. 

How to use
==========
* Use the Spektrum remote control.
* Make sure the multiwii is flashed with the firmware, and that you can arm it.
* Plug in the vehicle's battery, and let it calibrate (shouldn't be moved now!)
  * Once the blue light stops blinking, you can start.
* Arm the vehicle with the RC. 
  * The rear LED should turn on, and the blue arming LED on the board.
  * if you increase the thrust, the props should spin.
  * You can now fly.
    * Throttle input controls vertical acceleration
    * Yaw input controls where the vehicle thinks 'forward is', i.e. 
       where the LED blinks.
    * Roll & pitch control the thrust pointing direction ('tilt'), which
       allows you to control position. 


Mark Mueller, mwm@ethz.ch




